// Generated by CoffeeScript 1.6.2
var EventEmitter, Q, addMessageErr, chatRoom;

Q = require("q");

EventEmitter = require("events").EventEmitter;

chatRoom = Object.create(EventEmitter.prototype);

chatRoom.addMessage = function(user, msgtext) {
  var deferred,
    _this = this;

  deferred = Q.defer();
  process.nextTick(function() {
    var err, id, message;

    err = addMessageErr(user, msgtext);
    if (err) {
      return deferred.reject(err);
    } else {
      _this.messages || (_this.messages = []);
      id = _this.messages.length + 1;
      message = {
        id: id,
        user: user,
        msgtext: msgtext
      };
      _this.messages.push(message);
      _this.emit("message", message);
      return deferred.resolve(message);
    }
  });
  return deferred.promise;
};

chatRoom.getMessagesSince = function(id) {
  var deferred,
    _this = this;

  deferred = Q.defer();
  process.nextTick(function() {
    return deferred.resolve((_this.messages || []).slice(id));
  });
  return deferred.promise;
};

chatRoom.waitForMessagesSince = function(id) {
  var deferred, thisMsg,
    _this = this;

  deferred = Q.defer();
  thisMsg = null;
  this.getMessagesSince(id).then(function(msgs) {
    var listener;

    if (msgs.length > 0) {
      return deferred.resolve(msgs);
    } else {
      listener = function(message) {
        deferred.resolve([message]);
        return _this.removeListener("message", listener);
      };
      return _this.addListener("message", listener);
    }
  }).done();
  return deferred.promise;
};

module.exports = chatRoom;

addMessageErr = function(user, msgtext) {
  var err;

  if (!user && !msgtext) {
    err = new TypeError("user & msgtext both null");
  }
  if (!err) {
    if (!user) {
      err = new TypeError("user is null");
    }
    if (!msgtext) {
      err = new TypeError("Message text is null");
    }
  }
  return err;
};
