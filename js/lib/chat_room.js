// Generated by CoffeeScript 1.6.2
var EventEmitter, Q, chatRoom;

require("./function-bind");

Q = require('q');

EventEmitter = require('events').EventEmitter;

chatRoom = Object.create(EventEmitter.prototype, {
  addMessage: {
    value: function(user, msgtext) {
      var deferred;

      deferred = Q.defer();
      process.nextTick((function() {
        var err, id, message, _ref;

        if (!user) {
          err = new TypeError("user is null");
        }
        if (!msgtext) {
          err = new TypeError("Message text is null");
        }
        if (err) {
          deferred.reject(err);
        }
        if (!err) {
          if ((_ref = this.messages) == null) {
            this.messages = [];
          }
          id = this.messages.length + 1;
          message = {
            id: id,
            user: user,
            msgtext: msgtext
          };
          this.messages.push(message);
          this.emit("message", message);
          return deferred.resolve(message);
        }
      }).bind(this));
      return deferred.promise;
    }
  },
  getMessagesSince: {
    value: function(id) {
      var deferred;

      deferred = Q.defer();
      process.nextTick((function() {
        return deferred.resolve((this.messages || []).slice(id));
      }).bind(this));
      return deferred.promise;
    }
  },
  waitForMessagesSince: {
    value: function(id) {
      return this.getMessagesSince(id);
    }
  }
});

module.exports = chatRoom;
